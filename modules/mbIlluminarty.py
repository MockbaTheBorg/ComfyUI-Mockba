"""
Illuminarty AI Image Detection Node for ComfyUI
Detects if an image is AI-generated using the Illuminarty online API.
"""

# Standard library imports
import io
import warnings
warnings.filterwarnings("ignore")

# Third-party imports
import numpy as np
import requests
from PIL import Image

# Local imports
from .common import CATEGORIES


class mbIlluminarty:
    """Detect if an image is AI-generated using Illuminarty API."""
    
    # API constants
    API_URL = "https://app.illuminarty.ai/api/analysis/image"
    
    def __init__(self):
        """Initialize the Illuminarty detector node."""
        pass

    @classmethod
    def INPUT_TYPES(cls):
        """Define input types for AI detection."""
        return {
            "required": {
                "image": ("IMAGE", {
                    "tooltip": "Input image to analyze for AI generation"
                }),
                "confidence_threshold": ("FLOAT", {
                    "default": 0.5,
                    "min": 0.0,
                    "max": 1.0,
                    "step": 0.01,
                    "tooltip": "Confidence threshold for AI detection (0.0-1.0)"
                }),
                "image_format": (["JPEG", "PNG"], {
                    "default": "JPEG",
                    "tooltip": "Format to send image to API"
                })
            }
        }

    # Node metadata
    TITLE = "AI Image Detector (Illuminarty)"
    RETURN_TYPES = ("BOOLEAN", "FLOAT", "FLOAT", "STRING", "STRING")
    RETURN_NAMES = ("is_ai_generated", "ai_probability", "human_probability", "prediction", "api_response")
    FUNCTION = "detect_ai_image"
    CATEGORY = "unset"
    DESCRIPTION = "Detect if an image was generated by AI using Illuminarty online API service."

    def detect_ai_image(self, image, confidence_threshold=0.5, image_format="JPEG"):
        """
        Analyze image to detect if it's AI-generated using Illuminarty API.
        
        Args:
            image: Input image tensor
            confidence_threshold: Threshold for AI detection
            image_format: Format to send image (JPEG or PNG)
            
        Returns:
            tuple: (is_ai_generated, ai_probability, human_probability, prediction_text, api_response)
        """
        try:
            # Convert tensor to PIL Image
            pil_image = self._tensor_to_pil(image)
            
            # Convert PIL image to bytes for upload
            image_bytes = self._pil_to_bytes(pil_image, image_format)
            
            # Prepare the file for upload
            filename = f"image.{image_format.lower()}"
            mime_type = f"image/{image_format.lower()}"
            
            files = {
                'file': (filename, image_bytes, mime_type)
            }
            
            print(f"Sending image to Illuminarty API...")
            
            # Make API request
            response = requests.post(
                self.API_URL,
                files=files,
                timeout=30  # 30 second timeout
            )
            
            # Check if request was successful
            response.raise_for_status()
            
            # Parse JSON response
            result = response.json()
            
            print(f"Illuminarty API Response: {result}")
            
            # Extract probability from response
            if result.get("status") == "success" and "data" in result:
                ai_probability = float(result["data"]["probability"])
                human_probability = 1.0 - ai_probability
                
                # Make prediction based on threshold
                is_ai_generated = ai_probability > confidence_threshold
                
                # Create prediction text
                if is_ai_generated:
                    prediction_text = f"AI Generated (confidence: {ai_probability:.2%})"
                else:
                    prediction_text = f"Human Created (confidence: {human_probability:.2%})"
                
                # API response info
                api_response = f"Illuminarty API - Status: {result['status']}, Probability: {ai_probability:.4f}"
                
                print(f"Illuminarty Detection Result: {prediction_text}")
                print(f"AI Probability: {ai_probability:.4f}, Human Probability: {human_probability:.4f}")
                
                return (is_ai_generated, ai_probability, human_probability, prediction_text, api_response)
            
            else:
                # Handle unexpected response format
                error_msg = f"Unexpected API response format: {result}"
                print(error_msg)
                return (False, 0.0, 1.0, f"Error: {error_msg}", f"API Error: Invalid response")
                
        except requests.exceptions.RequestException as e:
            error_msg = f"Network error calling Illuminarty API: {str(e)}"
            print(error_msg)
            return (False, 0.0, 1.0, f"Network Error: {error_msg}", f"API Error: {str(e)}")
            
        except Exception as e:
            error_msg = f"Illuminarty detection failed: {str(e)}"
            print(error_msg)
            return (False, 0.0, 1.0, f"Error: {error_msg}", f"Error: {str(e)}")

    def _tensor_to_pil(self, tensor):
        """Convert ComfyUI image tensor to PIL Image."""
        # tensor is typically [batch, height, width, channels]
        if tensor.dim() == 4:
            tensor = tensor[0]  # Take first image from batch
        
        # Convert to numpy and ensure proper range [0, 255]
        if tensor.max() <= 1.0:
            tensor = tensor * 255
        
        array = tensor.cpu().numpy().astype(np.uint8)
        
        # Handle different channel arrangements
        if array.shape[-1] == 3:  # RGB
            pil_image = Image.fromarray(array, 'RGB')
        elif array.shape[-1] == 4:  # RGBA
            pil_image = Image.fromarray(array, 'RGBA')
        else:  # Grayscale
            if len(array.shape) == 3 and array.shape[-1] == 1:
                array = array[:, :, 0]
            pil_image = Image.fromarray(array, 'L').convert('RGB')
        
        return pil_image

    def _pil_to_bytes(self, pil_image, format_type):
        """Convert PIL Image to bytes for API upload."""
        # Create bytes buffer
        img_buffer = io.BytesIO()
        
        # Save image to buffer in specified format
        if format_type.upper() == "JPEG":
            # Convert RGBA to RGB for JPEG (no transparency support)
            if pil_image.mode == "RGBA":
                pil_image = pil_image.convert("RGB")
            pil_image.save(img_buffer, format="JPEG", quality=95)
        else:  # PNG
            pil_image.save(img_buffer, format="PNG")
        
        # Get bytes data
        img_buffer.seek(0)
        return img_buffer.getvalue()

    @classmethod
    def IS_CHANGED(cls, image, confidence_threshold, image_format):
        """Check if inputs have changed to determine if node needs to re-execute."""
        # Always re-execute when image changes (since we're calling external API)
        return True
